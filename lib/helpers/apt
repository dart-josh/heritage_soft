import 'dart:core';

import 'package:audioplayers/audioplayers.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:heritage_soft/appData.dart';
import 'package:heritage_soft/datamodels/physio_client_model.dart';
import 'package:heritage_soft/datamodels/users_model.dart';
import 'package:heritage_soft/global_variables.dart';
import 'package:heritage_soft/helpers/helper_methods.dart';
import 'package:provider/provider.dart';

class ClinicDatabaseHelpers {
  static final pt_client_ref =
      FirebaseFirestore.instance.collection('Physio Clients');

  // physio clients stream
  static Stream<QuerySnapshot<Map<String, dynamic>>> physio_clients_stream() {
    return pt_client_ref.snapshots();
  }

  // get physio clients
  static bool listener_started = false;
  static get_physio_clients(context) async {
    await physio_clients_stream().listen((event) {
      List<PhysioClientListModel> physio_clients = [];

      event.docs.forEach((e) {
        PhysioClientListModel cl_1 =
            PhysioClientListModel.fromMap(e.id, e.data());
        physio_clients.add(cl_1);
      });

      Provider.of<AppData>(context, listen: false)
          .update_physio_client(physio_clients);

      if (!listener_started) {
        if (app_role != 'doctor')
          get_doctors(context);
        else
          get_patient_by_doctor(context);

        listener_started = true;
      }
    });
  }

  // get all doctors & listen
  static get_doctors(context) async {
    List<DoctorModel> docs =
        Provider.of<AppData>(context, listen: false).doctors;

    await FirebaseFirestore.instance
        .collection('Doctors')
        .snapshots()
        .listen((event) async {
      if (app_role == 'doctor') return;

      event.docs.forEach((element) {
        var chk = docs.where((doc) => doc.key == element.id);

        if (chk.isNotEmpty) {
          DoctorModel doc = chk.first;

          doc.user_id = element.data()['user_id'] ?? '';
          doc.fullname = element.data()['fullname'] ?? '';
          doc.is_available = element.data()['is_available'] ?? false;
          doc.user_image = element.data()['user_image'] ?? '';
          doc.title = element.data()['title'] ?? 'Physiotherapist';
        } else {
          docs.add(DoctorModel.fromMap(element.id, element.data()));
        }
      });

      Provider.of<AppData>(context, listen: false).update_doctors(docs);
    });

    // listen to all doctors
    listen_to_doctors(context);
  }

  // listen to all doctors patients
  static listen_to_doctors(context) async {
    await FirebaseFirestore.instance.collection('Doctors').get().then((snap) {
      snap.docs.forEach((dd) {
        // ongoing patients
        dd.reference.collection('Patients').snapshots().listen((event) {
          List<PhysioClientListModel> ong_patients = [];
          List<PhysioClientListModel> pen_patients = [];
          int active_patients = 0;
          int ong_treatment = 0;
          int pen_treatment = 0;

          // assign each patient
          event.docs.forEach((element) {
            final PhysioClientListModel? cls =
                get_a_client(context, element.id);

            if (cls != null) {
              if (element.data()['ongoing_treatment']) {
                ong_patients.add(cls);
                ong_treatment++;
              }

              if (element.data()['pending_treatment']) {
                pen_patients.add(cls);
                pen_treatment++;
              }

              if (element.data()['ongoing_treatment'] == true ||
                  element.data()['pending_treatment'] == true) {
                active_patients++;
              }
            }
          });

          var doc = Provider.of<AppData>(context, listen: false)
              .doctors
              .where((doc) => dd.id == doc.key)
              .first;

          doc.active_patients = active_patients;
          doc.ong_treatment = ong_treatment;
          doc.pen_treatment = pen_treatment;
          doc.ong_patients = ong_patients;
          doc.pen_patients = pen_patients;

          // update doctor
          Provider.of<AppData>(context, listen: false)
              .update_single_doctor(doc);
        });

        // my patients
        dd.reference.collection('My Patients').snapshots().listen((event) {
          List<PhysioClientListModel> my_patients = [];
          int sessions = 0;

          // assign each patient
          event.docs.forEach((element) {
            PhysioClientListModel? cls = get_a_client(context, element.id);

            if (cls != null) {
              cls.treatment_sessions = element.data()['session_times'];
              sessions += cls.treatment_sessions;

              my_patients.add(cls);
            }
          });

          var doc = Provider.of<AppData>(context, listen: false)
              .doctors
              .where((doc) => dd.id == doc.key)
              .first;

          doc.total_sessions = sessions;
          doc.patients = event.docs.length;
          doc.all_patients = my_patients;

          // update doctor
          Provider.of<AppData>(context, listen: false)
              .update_single_doctor(doc);
        });
      });
    });
  }

  // audio player for doctors notification
  static final AudioPlayer player_2 = AudioPlayer();

  // get active doctors patients
  static get_patient_by_doctor(context) {
    int old_pen_treat_count = 0;

    if (active_doctor == null) return;

    var doc_ref = FirebaseFirestore.instance
        .collection('Doctors')
        .doc(active_doctor!.key);

    // pending patients
    doc_ref.collection('Patients').snapshots().listen((event) {
      List<PhysioClientListModel> ong_patients = [];
      int ong_treatment = 0;
      int pen_treatment = 0;

      // assign each patient
      event.docs.forEach((element) {
        PhysioClientListModel? cls = get_a_client(context, element.id);

        if (cls != null) {
          if (element.data()['ongoing_treatment']) {
            ong_treatment++;
          }

          if (element.data()['pending_treatment']) {
            pen_treatment++;
          }

          cls.ongoing_treatment = element.data()['ongoing_treatment'];
          cls.pending_treatment = element.data()['pending_treatment'];

          ong_patients.add(cls);
        }
      });

      // if pending patients exists
      if (pen_treatment != 0) {
        // if the pending patients increased
        if (old_pen_treat_count < pen_treatment) {
          // play notification sound
          player_2.play(AssetSource('new_patient.mp3'));
        }

        old_pen_treat_count = pen_treatment;
      }

      // if no pending patients
      else {
        old_pen_treat_count = pen_treatment;
      }

      // update active doctor
      active_doctor!.ong_treatment = ong_treatment;
      active_doctor!.pen_treatment = pen_treatment;
      Provider.of<AppData>(context, listen: false)
          .update_doctors_ong_patients(ong_patients);
    });

    // my patients
    doc_ref.collection('My Patients').snapshots().listen((event) {
      List<PhysioClientListModel> my_patients = [];
      int sessions = 0;
      int patients = event.docs.length;

      // assign each patient
      event.docs.forEach((element) {
        PhysioClientListModel? cls = get_a_client(context, element.id);

        if (cls != null) {
          cls.treatment_sessions = element.data()['session_times'];
          sessions += cls.treatment_sessions;

          my_patients.add(cls);
        }
      });

      // update active doctor
      active_doctor!.total_sessions = sessions;
      active_doctor!.patients = patients;
      Provider.of<AppData>(context, listen: false)
          .update_doctors_patients(my_patients);
    });
  }

  // get client details from list
  static PhysioClientListModel? get_a_client(context, String id) {
    var rt = Provider.of<AppData>(context, listen: false)
        .physio_clients
        .where((e) => e.key == id);

    if (rt.isNotEmpty)
      return rt.first;
    else
      return null;
  }

  // assign physio registration key
  static Future<String> assign_physio_registration_key() async {
    return await pt_client_ref.doc().id;
  }

  // check physio ID to ensure no duplicate
  static Future<List> check_physio_client_id(String client_id) async {
    try {
      var docs = await pt_client_ref.where('id', isEqualTo: client_id).get();

      if (docs.docs.isNotEmpty) {
        return [false, 'ID already exists, Reload software!'];
      }
    } catch (e) {
      return [false, 'An Error occurred'];
    }

    return [true, ''];
  }

  // register physio client
  static Future<bool> register_physio_client(
      String key, Map<String, dynamic> map) async {
    try {
      await pt_client_ref.doc(key).set(map);
    } catch (e) {
      return false;
    }

    return true;
  }

  // add physio sponsor
  static void add_physio_sponsor(String client_key, String? sponsor_key,
      Map<String, dynamic> sponsor_map) {
    pt_client_ref
        .doc(client_key)
        .collection('Other Sponsors')
        .doc(sponsor_key)
        .set(sponsor_map);
  }

  // delete physio sponsor
  static void delete_physio_sponsor(String client_key, String sponsor_key) {
    pt_client_ref
        .doc(client_key)
        .collection('Other Sponsors')
        .doc(sponsor_key)
        .delete();
  }

  // update last physio ID
  static void update_last_physio_id(String client_id) {
    FirebaseFirestore.instance
        .collection('Office')
        .doc('Last ID')
        .update({'last_pt_id': Helpers.strip_id(client_id)});
  }

  // physio client details stream
  static Stream<DocumentSnapshot<Map<String, dynamic>>>
      physio_client_details_stream(String key) {
    return pt_client_ref.doc(key).snapshots();
  }

  // physio sponsor stream
  static Stream<QuerySnapshot<Map<String, dynamic>>> physio_sponsor_stream(
      String key) {
    return pt_client_ref.doc(key).collection('Other Sponsors').snapshots();
  }

  // get physio health info
  static Future<QuerySnapshot<Map<String, dynamic>>> get_physio_health_info(
      String client_key) async {
    return await pt_client_ref.doc(client_key).collection('health_info').get();
  }

  // edit physio client
  static Future<bool> edit_physio_client(
      String key, Map<String, dynamic> map) async {
    try {
      await pt_client_ref.doc(key).update(map);
    } catch (e) {
      return false;
    }

    return true;
  }

  // delete physio client
  static Future<bool> delete_physio_client(String key) async {
    try {
      await pt_client_ref.doc(key).delete();
    } catch (e) {
      return false;
    }

    return true;
  }

  // case file stream
  static Stream<QuerySnapshot<Map<String, dynamic>>> case_file_stream(
      String client_key) {
    return pt_client_ref.doc(client_key).collection('Case File').snapshots();
  }

  // session info stream
  static Stream<DocumentSnapshot<Map<String, dynamic>>> session_info_stream(
      String client_key) {
    return pt_client_ref
        .doc(client_key)
        .collection('others')
        .doc('clinic_info')
        .snapshots();
  }

  // clinic variables stream
  static Stream<DocumentSnapshot<Map<String, dynamic>>> clinic_variables_stream(
      String client_key) {
    return pt_client_ref
        .doc(client_key)
        .collection('others')
        .doc('clinic_variables')
        .snapshots();
  }

  // treatment info stream
  static Stream<DocumentSnapshot<Map<String, dynamic>>> treatment_info_stream(
      String client_key) {
    return pt_client_ref
        .doc(client_key)
        .collection('others')
        .doc('treatment_info')
        .snapshots();
  }

  // assessment info stream
  static Stream<DocumentSnapshot<Map<String, dynamic>>> assessment_info_stream(
      String client_key) {
    return pt_client_ref
        .doc(client_key)
        .collection('others')
        .doc('assessment_info')
        .snapshots();
  }

  // update clinic info
  static Future<bool> update_clinic_info(
      String client_key, Map<String, dynamic> data,
      {bool sett = false}) async {
    try {
      if (sett)
        await pt_client_ref
            .doc(client_key)
            .collection('others')
            .doc('clinic_info')
            .set(data);
      else
        await pt_client_ref
            .doc(client_key)
            .collection('others')
            .doc('clinic_info')
            .update(data);
    } catch (e) {
      return false;
    }

    return true;
  }

  // assessment payment
  static Future<bool> update_treatment_info(
      String client_key, Map<String, dynamic> data,
      {bool sett = false}) async {
    try {
      if (sett)
        await pt_client_ref
            .doc(client_key)
            .collection('others')
            .doc('treatment_info')
            .set(data);
      else
        await pt_client_ref
            .doc(client_key)
            .collection('others')
            .doc('treatment_info')
            .update(data);
    } catch (e) {
      return false;
    }

    return true;
  }

  // add history  static Future<bool> add_history(
      String client_key, Map<String, dynamic> data) async {
    try {
      await pt_client_ref.doc(client_key).collection('history').add(data);
    } catch (e) {
      return false;
    }

    return true;
  }

  // get history
  static Future<QuerySnapshot<Map<String, dynamic>>> get_history(
      String client_key) {
    return pt_client_ref.doc(client_key).collection('history').get();
  }

  // update clinic variables
  static Future<bool> update_clinic_variables(
      String client_key, Map<String, dynamic> data,
      {bool sett = false}) async {
    try {
      if (sett)
        await pt_client_ref
            .doc(client_key)
            .collection('others')
            .doc('clinic_variables')
            .set(data);
      else
        await pt_client_ref
            .doc(client_key)
            .collection('others')
            .doc('clinic_variables')
            .update(data);
    } catch (e) {
      return false;
    }

    return true;
  }

  // remove patient from clinic
  static Future<bool> remove_from_clinic(String doctor_key, String client_key,
      {required bool remove}) async {
    try {
      await FirebaseFirestore.instance
          .collection('Doctors')
          .doc(doctor_key)
          .collection('Patients')
          .doc(client_key)
          .delete();
    } catch (e) {
      return false;
    }

    // set can treat to false
    bool dt = await update_clinic_variables(client_key, {
      'can_treat': false,
      'current_doctor': '',
    });

    // set free doctor
    if (remove) {
      FirebaseFirestore.instance
          .collection('Office')
          .doc('Clinic Space')
          .set({'free_doctor': true});
    }

    return dt;
  }

  // add patient to doctor tab
  static Future<bool> add_patient_to_doctor_tab(
      String doctor_key, String client_key) async {
    var doc_ref =
        FirebaseFirestore.instance.collection('Doctors').doc(doctor_key);

    var ref = doc_ref.collection('My Patients').doc(client_key).get();

    ref.then((snap) {
      if (snap.exists) {
        int session_times = (snap.data()!['session_times']) + 1;
        snap.reference.update({'session_times': session_times});
      } else {
        snap.reference.set({'session_times': 1});
      }
    });

    // remove patient form temp doctor tab
    doc_ref.collection('Patients').doc(client_key).delete();

    // reset clinic variables
    update_clinic_variables(
        client_key, {'can_treat': true, 'current_doctor': ''});

    // create free space in clinic
    FirebaseFirestore.instance
        .collection('Office')
        .doc('Clinic Space')
        .set({'free_doctor': true});

    return true;
  }

  // get case file (one)
  static Future<DocumentSnapshot<Map<String, dynamic>>> get_case_file(
      String client_key, String case_file_key) {
    return pt_client_ref
        .doc(client_key)
        .collection('Case File')
        .doc(case_file_key)
        .get();
  }

  // save case file
  static Future<bool> save_case_file(
      String client_key, String case_file_key, Map<String, dynamic> data,
      {bool sett = false}) async {
    try {
      if (sett)
        await pt_client_ref
            .doc(client_key)
            .collection('Case File')
            .doc(case_file_key)
            .set(data);
      else
        await pt_client_ref
            .doc(client_key)
            .collection('Case File')
            .doc(case_file_key)
            .update(data);

      return true;
    } catch (e) {
      return false;
    }
  }

  // update doctors temporary patient tab
  static Future<bool> update_doctors_temp_tab(
      String doctor_key, String patient_key, Map<String, dynamic> data) async {
    try {
      await FirebaseFirestore.instance
          .collection('Doctors')
          .doc(doctor_key)
          .collection('Patients')
          .doc(patient_key)
          .set(data);
      return true;
    } catch (e) {
      return false;
    }
  }

  // set physio health data
  static Future<bool> set_health_data(
      String client_key, String health_key, Map<String, dynamic> data) async {
    try {
      await ClinicDatabaseHelpers.pt_client_ref
          .doc(client_key)
          .collection('health_info')
          .doc(health_key)
          .set(data);

      return true;
    } catch (e) {
      return false;
    }
  }

  // accessory request
  static Future<bool> accessory_request(
      String shop_key, Map<String, dynamic> data) async {
    try {
      await FirebaseDatabase.instance
          .ref('Accessory Request')
          .child(shop_key)
          .set(data);

      return true;
    } catch (e) {
      return false;
    }
  }

  // save assessment details
  static Future<bool> save_assessment_details(
      String client_key, Map<String, dynamic> data) async {
    try {
      await pt_client_ref
          .doc(client_key)
          .collection('others')
          .doc('assessment_info')
          .set(data);

      return true;
    } catch (e) {
      return false;
    }
  }

  // audio player for free space in clinic notification
  static final AudioPlayer player_1 = AudioPlayer();

  // listen for free space in clinic
  static listen_to_free_doc(context) {
    FirebaseFirestore.instance
        .collection('Office')
        .doc('Clinic Space')
        .snapshots()
        .listen((event) async {
      if (event.exists) {
        if (event.data()!['free_doctor'] == true) {
          await player_1.play(AssetSource('free-doctor.mp3'));
          Helpers.showToast(
            context: context,
            color: Colors.black,
            toastText: 'Free clinic space',
            icon: Icons.check,
          );

          FirebaseFirestore.instance
              .collection('Office')
              .doc('Clinic Space')
              .update({'free_doctor': false});
        }
      }
    });
  }

  ///
}
